--**********************************************************************--
--			Matrix Multiplication				--
--**********************************************************************--

MODULE m_mul 
VAR
	F00  : Real;	
	F01  : Real;
	F02  : Real;
	F10  : Real;
	F11  : Real;	
	F12  : Real;
	F20  : Real;	
	F21  : Real;
	F22  : Real;
	
DEFINE
-- Resistance Matrix
	R00  := 2000;	R01  := 2000;	R02  := 3000;
	R10  := 1000;	R11  := 5000;	R12  := 2000;
	R20  := 3000;	R21  := 1000;	R22  := 1000;
--Capacitance Matrix
	C00  := 0.000000000000002;	C01  := 0.000000000000005;	C02  := 0.000000000000005;
	C10  := 0.000000000000001;	C11  := 0.000000000000009;	C12  := 0.000000000000002;
	C20  := 0.000000000000004;	C21  := 0.000000000000001;	C22  := 0.000000000000009;
ASSIGN
--Resultant Matrix
	F00  := (R00*C00)+(R01*C10)+(R02*C20);	
	F01  := (R00*C01)+(R01*C11)+(R02*C21);
	F02  := (R00*C02)+(R01*C12)+(R02*C22);
	F10  := (R10*C00)+(R11*C10)+(R12*C20);
	F11  := (R10*C01)+(R11*C11)+(R12*C21);	
	F12  := (R10*C02)+(R11*C12)+(R12*C22);
	F20  := (R20*C00)+(R21*C10)+(R22*C20);	
	F21  := (R20*C01)+(R21*C11)+(R22*C21);
	F22  := (R20*C02)+(R21*C12)+(R22*C22);

--**********************************************************************--
--			Module for 3 Neighbours				--
--**********************************************************************--
	      
MODULE c_3 (n0, n1, n2, n3, Teff1, Teff2, Teff3, P1, P2,P3, T1, F00, F01)
VAR 
	mc   : 0 .. 9;			-- Migrated Core Number
	t0   : Real;			
	T0   : Real;			-- Temprature of the core
	P0   : 0 .. 4;			-- Task Load of the core
	nt   : Integer;			-- Number of task migartion
DEFINE
	Th	:= 70.0;
	Teff0 	:= (T0*F00)+(T1*F01);  
ASSIGN
	init(mc)     := n0;
	init(nt)     := 0;
	init(T0)     := 
		    case 
		         P0 = 0 : 60;
	                 TRUE   : t0;
		    esac;
-- Migration Conditions
	next(mc)     := 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(P1<=P0)&(P1<=P2)&(P1<=P3)	: n1;
					(Teff2<Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(P2<=P0)&(P2<=P1)&(P2<=P3)	: n2;
					(Teff3<Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(P3<=P0)&(P3<=P1)&(P3<=P2)	: n3;
				        TRUE						: n0;
				esac;		     
	                  TRUE								: n0;
		    esac; 
	next(T0)     := 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(P1<=P0)&(P1<=P2)&(P1<=P3)	: T0 - (T0 - Th);
					(Teff2<Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(P2<=P0)&(P2<=P1)&(P2<=P3)	: T0 - (T0 - Th);
					(Teff3<Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(P3<=P0)&(P3<=P1)&(P3<=P2)	: T0 - (T0 - Th); 
				        TRUE						: T0 - (T0 - Th);
				esac;		     
	                  TRUE								: T0;
		    esac; 
	next(nt)     := 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(P1<=P0)&(P1<=P2)&(P1<=P3)	: nt + 1;
					(Teff2<Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(P2<=P0)&(P2<=P1)&(P2<=P3)	: nt + 1;
					(Teff3<Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(P3<=P0)&(P3<=P1)&(P3<=P2)	: nt + 1; 
				        TRUE						: nt;
				esac;		     
	                  TRUE								: nt;
		    esac; 
	next(P0)     := 
	       case
	            P0 = 0 : P0;
		    TRUE : 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(P1<=P0)&(P1<=P2)&(P1<=P3)	: P0 - 1;
					(Teff2<Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(P2<=P0)&(P2<=P1)&(P2<=P3)	: P0 - 1;
					(Teff3<Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(P3<=P0)&(P3<=P1)&(P3<=P2)	: P0 - 1; 
				        TRUE						: P0 - 1;
				esac;		     
	                  TRUE								: P0;
		    esac;
               esac;  
INIT
	t0 >= 60.0 & t0 <= 80.0
--**********************************************************************--
--			Module for 5 Neighbours				--
--**********************************************************************--
	      
MODULE c_5 (n0, n1, n2, n3, n4, n5, Teff1, Teff2, Teff3, Teff4, Teff5, P1, P2, P3, P4, P5, T1, T2, F00, F01, F10)
VAR 
	mc   : 0 .. 9;			-- Migrated Core Number
	t0   : Real;			
	T0   : Real;			-- Temprature of the core
	P0   : 0 .. 4;			-- Task Load of the core
	nt   : Integer;			-- Number of task migartion
DEFINE
	Th	:= 70.0;
	Teff0 	:= (T0*F00)+(T1*F01)+(T2*F10);  
ASSIGN
	init(mc)     := n0;
	init(nt)     := 0;
	init(T0)     := 
		    case 
		         P0 = 0 : 60;
	                 TRUE   : t0;
		    esac;
-- Migration Conditions
	next(mc)     := 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(Teff1<=Teff4)&(Teff1<=Teff5)&(P1<=P0)&(P1<=P2)&(P1<=P3)&(P1<=P4)&(P1<=P5)	: n1;
					(Teff2<Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(Teff2<=Teff4)&(Teff2<=Teff5)&(P2<=P0)&(P2<=P1)&(P2<=P3)&(P2<=P4)&(P2<=P5)	: n2;
					(Teff3<Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(Teff3<=Teff4)&(Teff3<=Teff5)&(P3<=P0)&(P3<=P1)&(P3<=P2)&(P3<=P4)&(P3<=P5)	: n3;
					(Teff4<Teff0)&(Teff4<=Teff1)&(Teff4<=Teff2)&(Teff4<=Teff3)&(Teff4<=Teff5)&(P4<=P0)&(P4<=P1)&(P4<=P2)&(P4<=P3)&(P4<=P5)	: n4;
					(Teff5<Teff0)&(Teff5<=Teff1)&(Teff5<=Teff2)&(Teff5<=Teff3)&(Teff5<=Teff4)&(P5<=P0)&(P5<=P1)&(P5<=P2)&(P5<=P3)&(P5<=P4)	: n5;
				        TRUE						: n0;
				esac;		     
	                  TRUE								: n0;
		    esac; 
	next(T0)     := 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(Teff1<=Teff4)&(Teff1<=Teff5)&(P1<=P0)&(P1<=P2)&(P1<=P3)&(P1<=P4)&(P1<=P5)	: T0 - (T0 - Th);
					(Teff2<Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(Teff2<=Teff4)&(Teff2<=Teff5)&(P2<=P0)&(P2<=P1)&(P2<=P3)&(P2<=P4)&(P2<=P5)	: T0 - (T0 - Th);
					(Teff3<Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(Teff3<=Teff4)&(Teff3<=Teff5)&(P3<=P0)&(P3<=P1)&(P3<=P2)&(P3<=P4)&(P3<=P5)	: T0 - (T0 - Th);
					(Teff4<Teff0)&(Teff4<=Teff1)&(Teff4<=Teff2)&(Teff4<=Teff3)&(Teff4<=Teff5)&(P4<=P0)&(P4<=P1)&(P4<=P2)&(P4<=P3)&(P4<=P5)	: T0 - (T0 - Th);
					(Teff5<Teff0)&(Teff5<=Teff1)&(Teff5<=Teff2)&(Teff5<=Teff3)&(Teff5<=Teff4)&(P5<=P0)&(P5<=P1)&(P5<=P2)&(P5<=P3)&(P5<=P4)	: T0 - (T0 - Th);
				        TRUE						: T0 - (T0 - Th);
				esac;		     
	                  TRUE								: T0;
		    esac;
	next(nt)     := 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(Teff1<=Teff4)&(Teff1<=Teff5)&(P1<=P0)&(P1<=P2)&(P1<=P3)&(P1<=P4)&(P1<=P5)	: nt + 1;
					(Teff2<Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(Teff2<=Teff4)&(Teff2<=Teff5)&(P2<=P0)&(P2<=P1)&(P2<=P3)&(P2<=P4)&(P2<=P5)	: nt + 1;
					(Teff3<Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(Teff3<=Teff4)&(Teff3<=Teff5)&(P3<=P0)&(P3<=P1)&(P3<=P2)&(P3<=P4)&(P3<=P5)	: nt + 1;
					(Teff4<Teff0)&(Teff4<=Teff1)&(Teff4<=Teff2)&(Teff4<=Teff3)&(Teff4<=Teff5)&(P4<=P0)&(P4<=P1)&(P4<=P2)&(P4<=P3)&(P4<=P5)	: nt + 1;
					(Teff5<Teff0)&(Teff5<=Teff1)&(Teff5<=Teff2)&(Teff5<=Teff3)&(Teff5<=Teff4)&(P5<=P0)&(P5<=P1)&(P5<=P2)&(P5<=P3)&(P5<=P4)	: nt + 1;
				        TRUE						: nt;
				esac;		     
	                  TRUE								: nt;
		    esac; 
	next(P0)     :=
	       case
	            P0 = 0 : P0;
		    TRUE : 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(Teff1<=Teff4)&(Teff1<=Teff5)&(P1<=P0)&(P1<=P2)&(P1<=P3)&(P1<=P4)&(P1<=P5)	: P0 - 1;
					(Teff2<Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(Teff2<=Teff4)&(Teff2<=Teff5)&(P2<=P0)&(P2<=P1)&(P2<=P3)&(P2<=P4)&(P2<=P5)	: P0 - 1;
					(Teff3<Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(Teff3<=Teff4)&(Teff3<=Teff5)&(P3<=P0)&(P3<=P1)&(P3<=P2)&(P3<=P4)&(P3<=P5)	: P0 - 1;
					(Teff4<Teff0)&(Teff4<=Teff1)&(Teff4<=Teff2)&(Teff4<=Teff3)&(Teff4<=Teff5)&(P4<=P0)&(P4<=P1)&(P4<=P2)&(P4<=P3)&(P4<=P5)	: P0 - 1;
					(Teff5<Teff0)&(Teff5<=Teff1)&(Teff5<=Teff2)&(Teff5<=Teff3)&(Teff5<=Teff4)&(P5<=P0)&(P5<=P1)&(P5<=P2)&(P5<=P3)&(P5<=P4)	: P0 - 1;
				        TRUE						: P0 - 1;
				esac;		     
	                 TRUE								: P0;
		    esac;
               esac; 								
INIT
	t0 >= 60.0 & t0 <= 80.0

--**********************************************************************--
--			Module for 8 Neighbours				--
--**********************************************************************--
	      
MODULE c_8 (n0, n1, n2, n3, n4, n5, n6, n7, n8, Teff1, Teff2, Teff3, Teff4, Teff5, Teff6, Teff7, Teff8, P1, P2, P3, P4, P5, P6, P7, P8, T1, T2, F00, F01, F02)
VAR 
	mc   : 0 .. 9;			-- Migrated Core Number
	t0   : Real;			
	T0   : Real;			-- Temprature of the core
	P0   : 0 .. 4;			-- Task Load of the core
	nt   : Integer;			-- Number of task migartion

DEFINE
	Th	:= 70.0;
	Teff0 	:= (T0*F00)+(T1*F01)+(T2*F02);  
ASSIGN
	init(mc)     := n0;
	init(nt)     := 0;
	init(T0)     := 
		    case 
		         P0 = 0 : 60;
 	                 TRUE   : t0;
		    esac;
-- Migration Conditions
	next(mc)     := 
		    case 
		    	 T0>Th  :
			 	case
					(Teff1<=Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(Teff1<=Teff4)&(Teff1<=Teff5)&(Teff1<=Teff6)&(Teff1<=Teff7)&(Teff1<=Teff8)&(P1<=P0)&(P1<=P2)&(P1<=P3)&(P1<=P4)&(P1<=P5)&(P1<=P6)&(P1<=P7)&(P1<=P8)	: n1;
					(Teff2<=Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(Teff2<=Teff4)&(Teff2<=Teff5)&(Teff2<=Teff6)&(Teff2<=Teff7)&(Teff2<=Teff8)&(P2<=P0)&(P2<=P1)&(P2<=P3)&(P2<=P4)&(P1<=P5)&(P2<=P6)&(P2<=P7)&(P2<=P8)	: n2;
					(Teff3<=Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(Teff3<=Teff4)&(Teff3<=Teff5)&(Teff3<=Teff6)&(Teff3<=Teff7)&(Teff3<=Teff8)&(P3<=P0)&(P3<=P1)&(P3<=P2)&(P3<=P4)&(P3<=P5)&(P3<=P6)&(P3<=P7)&(P3<=P8)	: n3;
					(Teff4<=Teff0)&(Teff4<=Teff1)&(Teff4<=Teff2)&(Teff4<=Teff3)&(Teff4<=Teff5)&(Teff4<=Teff6)&(Teff4<=Teff7)&(Teff4<=Teff8)&(P4<=P0)&(P4<=P1)&(P4<=P2)&(P4<=P3)&(P4<=P5)&(P4<=P6)&(P4<=P7)&(P4<=P8)	: n4;
					(Teff5<=Teff0)&(Teff5<=Teff1)&(Teff5<=Teff2)&(Teff5<=Teff3)&(Teff5<=Teff4)&(Teff5<=Teff6)&(Teff5<=Teff7)&(Teff5<=Teff8)&(P5<=P0)&(P5<=P1)&(P5<=P2)&(P5<=P3)&(P5<=P4)&(P5<=P6)&(P5<=P7)&(P5<=P8)	: n5;
					(Teff6<=Teff0)&(Teff6<=Teff1)&(Teff6<=Teff2)&(Teff6<=Teff3)&(Teff6<=Teff4)&(Teff6<=Teff5)&(Teff6<=Teff7)&(Teff6<=Teff8)&(P6<=P0)&(P6<=P1)&(P6<=P2)&(P6<=P3)&(P6<=P4)&(P6<=P5)&(P6<=P7)&(P6<=P8)	: n6;
					(Teff7<=Teff0)&(Teff7<=Teff1)&(Teff7<=Teff2)&(Teff7<=Teff3)&(Teff7<=Teff4)&(Teff7<=Teff5)&(Teff7<=Teff6)&(Teff7<=Teff8)&(P7<=P0)&(P7<=P1)&(P7<=P2)&(P7<=P3)&(P7<=P4)&(P7<=P5)&(P7<=P6)&(P7<=P8)	: n7;
					(Teff8<=Teff0)&(Teff8<=Teff1)&(Teff8<=Teff2)&(Teff8<=Teff3)&(Teff8<=Teff4)&(Teff8<=Teff5)&(Teff5<=Teff6)&(Teff8<=Teff7)&(P8<=P0)&(P8<=P1)&(P8<=P2)&(P8<=P3)&(P8<=P4)&(P8<=P5)&(P8<=P6)&(P8<=P7)	: n8;
				        TRUE						: n0;
				esac;		     
	            TRUE								: n0;
		    esac; 
	next(T0)     := 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<=Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(Teff1<=Teff4)&(Teff1<=Teff5)&(Teff1<=Teff6)&(Teff1<=Teff7)&(Teff1<=Teff8)&(P1<=P0)&(P1<=P2)&(P1<=P3)&(P1<=P4)&(P1<=P5)&(P1<=P6)&(P1<=P7)&(P1<=P8)	: T0 - (T0 - Th);
					(Teff2<=Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(Teff2<=Teff4)&(Teff2<=Teff5)&(Teff2<=Teff6)&(Teff2<=Teff7)&(Teff2<=Teff8)&(P2<=P0)&(P2<=P1)&(P2<=P3)&(P2<=P4)&(P1<=P5)&(P2<=P6)&(P2<=P7)&(P2<=P8)	: T0 - (T0 - Th); 
					(Teff3<=Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(Teff3<=Teff4)&(Teff3<=Teff5)&(Teff3<=Teff6)&(Teff3<=Teff7)&(Teff3<=Teff8)&(P3<=P0)&(P3<=P1)&(P3<=P2)&(P3<=P4)&(P3<=P5)&(P3<=P6)&(P3<=P7)&(P3<=P8)	: T0 - (T0 - Th); 
					(Teff4<=Teff0)&(Teff4<=Teff1)&(Teff4<=Teff2)&(Teff4<=Teff3)&(Teff4<=Teff5)&(Teff4<=Teff6)&(Teff4<=Teff7)&(Teff4<=Teff8)&(P4<=P0)&(P4<=P1)&(P4<=P2)&(P4<=P3)&(P4<=P5)&(P4<=P6)&(P4<=P7)&(P4<=P8)	: T0 - (T0 - Th); 
					(Teff5<=Teff0)&(Teff5<=Teff1)&(Teff5<=Teff2)&(Teff5<=Teff3)&(Teff5<=Teff4)&(Teff5<=Teff6)&(Teff5<=Teff7)&(Teff5<=Teff8)&(P5<=P0)&(P5<=P1)&(P5<=P2)&(P5<=P3)&(P5<=P4)&(P5<=P6)&(P5<=P7)&(P5<=P8)	: T0 - (T0 - Th); 
					(Teff6<=Teff0)&(Teff6<=Teff1)&(Teff6<=Teff2)&(Teff6<=Teff3)&(Teff6<=Teff4)&(Teff6<=Teff5)&(Teff6<=Teff7)&(Teff6<=Teff8)&(P6<=P0)&(P6<=P1)&(P6<=P2)&(P6<=P3)&(P6<=P4)&(P6<=P5)&(P6<=P7)&(P6<=P8)	: T0 - (T0 - Th); 
					(Teff7<=Teff0)&(Teff7<=Teff1)&(Teff7<=Teff2)&(Teff7<=Teff3)&(Teff7<=Teff4)&(Teff7<=Teff5)&(Teff7<=Teff6)&(Teff7<=Teff8)&(P7<=P0)&(P7<=P1)&(P7<=P2)&(P7<=P3)&(P7<=P4)&(P7<=P5)&(P7<=P6)&(P7<=P8)	: T0 - (T0 - Th); 
					(Teff8<=Teff0)&(Teff8<=Teff1)&(Teff8<=Teff2)&(Teff8<=Teff3)&(Teff8<=Teff4)&(Teff8<=Teff5)&(Teff5<=Teff6)&(Teff8<=Teff7)&(P8<=P0)&(P8<=P1)&(P8<=P2)&(P8<=P3)&(P8<=P4)&(P8<=P5)&(P8<=P6)&(P8<=P7)	: T0 - (T0 - Th); 
				        TRUE						: T0 - (T0 - Th);
				esac;		     
	                  TRUE								: T0;
		    esac;
	next(nt)     := 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<=Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(Teff1<=Teff4)&(Teff1<=Teff5)&(Teff1<=Teff6)&(Teff1<=Teff7)&(Teff1<=Teff8)&(P1<=P0)&(P1<=P2)&(P1<=P3)&(P1<=P4)&(P1<=P5)&(P1<=P6)&(P1<=P7)&(P1<=P8)	: nt + 1;
					(Teff2<=Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(Teff2<=Teff4)&(Teff2<=Teff5)&(Teff2<=Teff6)&(Teff2<=Teff7)&(Teff2<=Teff8)&(P2<=P0)&(P2<=P1)&(P2<=P3)&(P2<=P4)&(P1<=P5)&(P2<=P6)&(P2<=P7)&(P2<=P8)	: nt + 1; 
					(Teff3<=Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(Teff3<=Teff4)&(Teff3<=Teff5)&(Teff3<=Teff6)&(Teff3<=Teff7)&(Teff3<=Teff8)&(P3<=P0)&(P3<=P1)&(P3<=P2)&(P3<=P4)&(P3<=P5)&(P3<=P6)&(P3<=P7)&(P3<=P8)	: nt + 1; 
					(Teff4<=Teff0)&(Teff4<=Teff1)&(Teff4<=Teff2)&(Teff4<=Teff3)&(Teff4<=Teff5)&(Teff4<=Teff6)&(Teff4<=Teff7)&(Teff4<=Teff8)&(P4<=P0)&(P4<=P1)&(P4<=P2)&(P4<=P3)&(P4<=P5)&(P4<=P6)&(P4<=P7)&(P4<=P8)	: nt + 1; 
					(Teff5<=Teff0)&(Teff5<=Teff1)&(Teff5<=Teff2)&(Teff5<=Teff3)&(Teff5<=Teff4)&(Teff5<=Teff6)&(Teff5<=Teff7)&(Teff5<=Teff8)&(P5<=P0)&(P5<=P1)&(P5<=P2)&(P5<=P3)&(P5<=P4)&(P5<=P6)&(P5<=P7)&(P5<=P8)	: nt + 1; 
					(Teff6<=Teff0)&(Teff6<=Teff1)&(Teff6<=Teff2)&(Teff6<=Teff3)&(Teff6<=Teff4)&(Teff6<=Teff5)&(Teff6<=Teff7)&(Teff6<=Teff8)&(P6<=P0)&(P6<=P1)&(P6<=P2)&(P6<=P3)&(P6<=P4)&(P6<=P5)&(P6<=P7)&(P6<=P8)	: nt + 1;
					(Teff7<=Teff0)&(Teff7<=Teff1)&(Teff7<=Teff2)&(Teff7<=Teff3)&(Teff7<=Teff4)&(Teff7<=Teff5)&(Teff7<=Teff6)&(Teff7<=Teff8)&(P7<=P0)&(P7<=P1)&(P7<=P2)&(P7<=P3)&(P7<=P4)&(P7<=P5)&(P7<=P6)&(P7<=P8)	: nt + 1;
					(Teff8<=Teff0)&(Teff8<=Teff1)&(Teff8<=Teff2)&(Teff8<=Teff3)&(Teff8<=Teff4)&(Teff8<=Teff5)&(Teff5<=Teff6)&(Teff8<=Teff7)&(P8<=P0)&(P8<=P1)&(P8<=P2)&(P8<=P3)&(P8<=P4)&(P8<=P5)&(P8<=P6)&(P8<=P7)	: nt + 1;
				        TRUE						: nt;
				esac;		     
	                  TRUE								: nt;
		    esac;
	next(P0)     := 
	       case
	            P0 = 0 : P0;
		    TRUE : 
		    case 
		    	 T0>Th	:
			 	case
					(Teff1<=Teff0)&(Teff1<=Teff2)&(Teff1<=Teff3)&(Teff1<=Teff4)&(Teff1<=Teff5)&(Teff1<=Teff6)&(Teff1<=Teff7)&(Teff1<=Teff8)&(P1<=P0)&(P1<=P2)&(P1<=P3)&(P1<=P4)&(P1<=P5)&(P1<=P6)&(P1<=P7)&(P1<=P8)	: P0 - 1;
					(Teff2<=Teff0)&(Teff2<=Teff1)&(Teff2<=Teff3)&(Teff2<=Teff4)&(Teff2<=Teff5)&(Teff2<=Teff6)&(Teff2<=Teff7)&(Teff2<=Teff8)&(P2<=P0)&(P2<=P1)&(P2<=P3)&(P2<=P4)&(P1<=P5)&(P2<=P6)&(P2<=P7)&(P2<=P8)	: P0 - 1; 
					(Teff3<=Teff0)&(Teff3<=Teff1)&(Teff3<=Teff2)&(Teff3<=Teff4)&(Teff3<=Teff5)&(Teff3<=Teff6)&(Teff3<=Teff7)&(Teff3<=Teff8)&(P3<=P0)&(P3<=P1)&(P3<=P2)&(P3<=P4)&(P3<=P5)&(P3<=P6)&(P3<=P7)&(P3<=P8)	: P0 - 1;
					(Teff4<=Teff0)&(Teff4<=Teff1)&(Teff4<=Teff2)&(Teff4<=Teff3)&(Teff4<=Teff5)&(Teff4<=Teff6)&(Teff4<=Teff7)&(Teff4<=Teff8)&(P4<=P0)&(P4<=P1)&(P4<=P2)&(P4<=P3)&(P4<=P5)&(P4<=P6)&(P4<=P7)&(P4<=P8)	: P0 - 1; 
					(Teff5<=Teff0)&(Teff5<=Teff1)&(Teff5<=Teff2)&(Teff5<=Teff3)&(Teff5<=Teff4)&(Teff5<=Teff6)&(Teff5<=Teff7)&(Teff5<=Teff8)&(P5<=P0)&(P5<=P1)&(P5<=P2)&(P5<=P3)&(P5<=P4)&(P5<=P6)&(P5<=P7)&(P5<=P8)	: P0 - 1; 
					(Teff6<=Teff0)&(Teff6<=Teff1)&(Teff6<=Teff2)&(Teff6<=Teff3)&(Teff6<=Teff4)&(Teff6<=Teff5)&(Teff6<=Teff7)&(Teff6<=Teff8)&(P6<=P0)&(P6<=P1)&(P6<=P2)&(P6<=P3)&(P6<=P4)&(P6<=P5)&(P6<=P7)&(P6<=P8)	: P0 - 1;
					(Teff7<=Teff0)&(Teff7<=Teff1)&(Teff7<=Teff2)&(Teff7<=Teff3)&(Teff7<=Teff4)&(Teff7<=Teff5)&(Teff7<=Teff6)&(Teff7<=Teff8)&(P7<=P0)&(P7<=P1)&(P7<=P2)&(P7<=P3)&(P7<=P4)&(P7<=P5)&(P7<=P6)&(P7<=P8)	: P0 - 1; 
					(Teff8<=Teff0)&(Teff8<=Teff1)&(Teff8<=Teff2)&(Teff8<=Teff3)&(Teff8<=Teff4)&(Teff8<=Teff5)&(Teff5<=Teff6)&(Teff8<=Teff7)&(P8<=P0)&(P8<=P1)&(P8<=P2)&(P8<=P3)&(P8<=P4)&(P8<=P5)&(P8<=P6)&(P8<=P7)	: P0 - 1; 
				        TRUE						: P0 - 1;
				esac;		     
	                  TRUE								: P0;
		    esac;
               esac;   
INIT
	t0 >= 60.0 & t0 <= 80.0
--**********************************************************************--
--			Main Module					--
--**********************************************************************--

MODULE main
VAR
--RC Matrix
     RC	: m_mul;
     nt1: Integer;
     nt2: Integer;  

--******************************** 3X3 Grid ****************************--
-- corner cores (with three neighbours)

   core_0 : c_3 (0, 1, 3, 4, core_1.Teff0, core_3.Teff0, core_4.Teff0, core_1.P0, core_3.P0, core_4.P0, core_3.T0, RC.F00, RC.F01);
   core_2 : c_3 (2, 1, 4, 5, core_1.Teff0, core_4.Teff0, core_5.Teff0, core_1.P0, core_4.P0, core_5.P0, core_5.T0, RC.F01, RC.F02);
   core_6 : c_3 (6, 3, 4, 7, core_3.Teff0, core_4.Teff0, core_7.Teff0, core_3.P0, core_4.P0, core_7.P0, core_3.T0, RC.F21, RC.F20);
   core_8 : c_3 (8, 4, 5, 7, core_4.Teff0, core_5.Teff0, core_7.Teff0, core_4.P0, core_5.P0, core_7.P0, core_5.T0, RC.F22, RC.F21); 

--center core (with eight neighbours)  
   
   core_4 : c_8 (4, 0, 1, 2, 3, 5, 6, 7, 8, core_0.Teff0, core_1.Teff0, core_2.Teff0, core_3.Teff0, core_5.Teff0, core_6.Teff0, core_7.Teff0, core_8.Teff0, core_0.P0, core_1.P0, core_2.P0, core_3.P0, core_5.P0, core_6.P0, core_7.P0, core_8.P0, core_1.T0, core_7.T0, RC.F11, RC.F10, RC.F12);

--remaining cores (with five neighbours)

   core_1 : c_5 (1, 0, 2, 3, 4, 5, core_0.Teff0, core_2.Teff0, core_3.Teff0, core_4.Teff0, core_5.Teff0, core_0.P0, core_2.P0, core_3.P0, core_4.P0, core_5.P0, core_4.T0, core_7.T0, RC.F00, RC.F01, RC.F02);
   core_3 : c_5 (3, 0, 1, 4, 6, 7, core_0.Teff0, core_1.Teff0, core_4.Teff0, core_6.Teff0, core_7.Teff0, core_0.P0, core_1.P0, core_4.P0, core_6.P0, core_7.P0, core_0.T0, core_6.T0, RC.F10, RC.F11, RC.F12);
   core_5 : c_5 (5, 1, 2, 4, 7, 8, core_1.Teff0, core_2.Teff0, core_4.Teff0, core_7.Teff0, core_8.Teff0, core_1.P0, core_2.P0, core_4.P0, core_7.P0, core_8.P0, core_2.T0, core_8.T0, RC.F11, RC.F10, RC.F12);
   core_7 : c_5 (7, 3, 4, 5, 6, 8, core_3.Teff0, core_4.Teff0, core_5.Teff0, core_6.Teff0, core_8.Teff0, core_3.P0, core_4.P0, core_5.P0, core_6.P0, core_8.P0, core_1.T0, core_4.T0, RC.F22, RC.F20, RC.F21); 

--******************************** 2X2 Grid ****************************--

   core_00 : c_3 (0, 1, 2, 3, core_01.Teff0, core_10.Teff0, core_11.Teff0, core_01.P0, core_10.P0, core_11.P0, core_01.T0, RC.F00, RC.F01);
   core_01 : c_3 (1, 0, 2, 3, core_00.Teff0, core_10.Teff0, core_11.Teff0, core_00.P0, core_10.P0, core_11.P0, core_00.T0, RC.F01, RC.F00);
   core_10 : c_3 (2, 0, 1, 3, core_00.Teff0, core_01.Teff0, core_11.Teff0, core_00.P0, core_01.P0, core_11.P0, core_11.T0, RC.F10, RC.F11);
   core_11 : c_3 (3, 0, 1, 2, core_00.Teff0, core_01.Teff0, core_10.Teff0, core_00.P0, core_01.P0, core_10.P0, core_10.T0, RC.F11, RC.F10); 

ASSIGN 
       nt1 := core_0.nt + core_1.nt + core_2.nt + core_3.nt + core_4.nt + core_5.nt + core_6.nt + core_7.nt + core_8.nt;
       nt2 := core_00.nt + core_01.nt + core_10.nt + core_11.nt;


     
